name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  unit_test:
    name: Unit test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macOS-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v2
    - name: Install ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
    - name: Run unit tests
      run:  cargo test --lib --all-features

  check_fmt:
    name: check cargo fmt
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: fmt
        run: make check-fmt

  check_clippy:
    name: clippy check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: clippy
        run: make check-clippy


  k8_test:
      name: Kubernetes integration test
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [ubuntu-latest]
          k8: [minikube,k3d,kind]
          rust: [stable]

      steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install Minikube
        if: startsWith(matrix.k8,'minikube')
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.21.0"
          kubernetes version: "v1.19.6"
          github token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install k3d
        if: startsWith(matrix.k8,'k3d')
        run: |
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
          k3d cluster create fluvio-k3d --image rancher/k3s:v1.19.12-k3s1-amd64
      - name: Install Kind
        if: startsWith(matrix.k8,'kind')
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
          chmod +x ./kind
          ./kind create cluster
      - name: Test K8 Installation
        run: |
          kubectl get nodes
          kubectl config view
      - name: Build test
        run: cargo build --tests --all-features
      - name: K8 client integration test native
        run: make k8-client-integration-test-native
        timeout-minutes: 2

